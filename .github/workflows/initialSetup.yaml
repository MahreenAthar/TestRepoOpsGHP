name: Track Issue Dates in Project
on:
  issues:
    types:
      - opened
      - closed

jobs:
  track_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Get project data
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: MahreenAthar
          REPO: TestRepoOpsGHP
          PROJECT_NUMBER: 1
        run: |
          gh api graphql -f query='
            query($user: String!, $repo: String!, $number: Int!) {
              repository(owner: $user, name: $repo) {
                projectV2(number: $number) {
                  id
                  fields(first:20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }' -f user=$USER -f repo=$REPO -F number=$PROJECT_NUMBER > project_data.json
          echo 'PROJECT_ID='$(jq '.data.repository.projectV2.id' project_data.json) >> $GITHUB_ENV
          echo 'START_DATE_FIELD_ID='$(jq '.data.repository.projectV2.fields.nodes[] | select(.name == "Start Date") | .id' project_data.json) >> $GITHUB_ENV
          echo 'END_DATE_FIELD_ID='$(jq '.data.repository.projectV2.fields.nodes[] | select(.name == "End Date") | .id' project_data.json) >> $GITHUB_ENV

      - name: Add Issue to Project and Set Dates
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_ID="${{ github.event.issue.node_id }}"
          PROJECT_ID="${{ env.PROJECT_ID }}"
          START_DATE_FIELD_ID="${{ env.START_DATE_FIELD_ID }}"
          END_DATE_FIELD_ID="${{ env.END_DATE_FIELD_ID }}"

          # Add Issue to Project
          gh api graphql -f query='
            mutation($project:ID!, $issue:ID!) {
              addProjectV2ItemById(input: {projectId: $project, contentId: $issue}) {
                item {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f issue=$ISSUE_ID --jq '.data.addProjectV2ItemById.item.id'

          # Set Start Date when issue is opened
          if [ "${{ github.event.action }}" == "opened" ]; then
            gh api graphql -f query='
              mutation ($project: ID!, $item: ID!, $field: ID!, $date: Date!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $field
                  value: {
                    date: $date
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }' -f project=$PROJECT_ID -f item=$ISSUE_ID -f field=$START_DATE_FIELD_ID -f date="${{ github.event.issue.created_at }}" --silent
          fi

          # Set End Date when issue is closed
          if [ "${{ github.event.action }}" == "closed" ]; then
            gh api graphql -f query='
              mutation ($project: ID!, $item: ID!, $field: ID!, $date: Date!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $project
                  itemId: $item
                  fieldId: $field
                  value: {
                    date: $date
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }' -f project=$PROJECT_ID -f item=$ISSUE_ID -f field=$END_DATE_FIELD_ID -f date="${{ github.event.issue.closed_at }}" --silent
          fi
